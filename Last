# Packages

library(terra)
library(raster)
library(sf)
library(RStoolbox)
library(purrr)
library(crayon)


# Import composites and masks

composites <- list.files(path = "/home/alessio/Synthesis/composites", pattern = "20", full.names = TRUE, recursive = TRUE) %>%
  map(~stack(.)/10000) # apply radiometric calibration

clouds <- list.files(path = "/home/alessio/Synthesis/UDM", pattern = "udm", full.names = TRUE) %>%
  map(~stack(.))

# Mask Clouds

# # Mask the PlanetScope image using the cloud mask
# masked_composites <- map2(composites, mask, 
#                          clouds, 
#                          maskvalue = 1, 
#                          inverse = TRUE)



# Function to apply cloud mask to an image
mask_image <- function(image_path, mask_path) {
  # Load the image and the mask
  image <- rast(image_path)
  cloud_mask <- rast(mask_path)
  
  # Apply the mask
  masked_image <- mask(image, cloud_mask, maskvalue = 2, inverse = FALSE)
  
  return(masked_image)
}

# Apply the function to each pair of image and mask
masked_list <- list()
for(i in 1:16){
  masked_images <- mask(composites[[i]], clouds[[i]])
  masked_list <- c(masked_list, masked_images)
}

attempt <- mask(composites[[1]], clouds[[1]], maskvalue = 2, inverse = TRUE)

plot(clouds[[4]])

  
#### NDVI ####

# Calculate the NDVI

ndvi <- map_at(composites, c(1:16), spectralIndices,  # for RapidEye imagery
                         blue = 1,
                         green = 2,
                         red = 3,
                         redEdge1 = 4,
                         nir = 5,
                         indices = "NDVI")

ndvi <- map_at(ndvi, c(17:57), spectralIndices, # for PS2 imagery
               blue = 1,
               green = 2,
               red = 3,
               nir = 4,
               indices = "NDVI")

ndvi <- map(ndvi, raster) # Convert to RasterLayer


# MASK CLOUDS

clouds <- list.files(path = "/home/alessio/Synthesis/UDM", pattern = "20", full.names = TRUE) %>%
  map(~ rast(.x))


# To extract only the clouds band from the PS imagery
specific_band <- 6

# Subset the list and extract the cloud band from each raster
clouds_subset <- clouds[17:57] %>%
  map(~ .x[[specific_band]])

clouds[17:57] <- clouds_subset

# Create a mask where values < 2 are TRUE (will be masked) for RapidEye images
mask <- map(clouds[1:16], ~ .x < 2)

# Apply the mask: set values < 2 to NA
# Assuming 'clouds' is a list of raster layers and 'mask' is the list of logical masks
clouds_masked_re <- map2(clouds[1:16], mask, ~ mask(.x, .y, maskvalue = TRUE))

plot(clouds_masked[[9]])
plot(clouds[[43]])



# Do the same for PS images
mask <- map(clouds[17:57], ~ .x < 1)

clouds_masked_ps <- map2(clouds[17:57], mask, ~ mask(.x, .y, maskvalue = TRUE))


clouds_masked <- c(clouds_masked_re, clouds_masked_ps)



ndvi <- map(ndvi, rast)

prova <- map2(ndvi, clouds_masked, ~ mask(.x, .y, inverse = TRUE))

plot(prova[[61]])

prova2 <- map2(ndvi[43:48], clouds_masked[43:48], ~ mask(.x, .y, inverse = TRUE))
plot(prova2[[2]])

plot(ndvi[[43, 44, 45, 46, 47, 48]])
plot(ndvi[[43]])
plot(clouds_masked[[43]])

rm(clouds_masked_re, clouds_masked_ps)

# Mask composite
composites_masked <- mask(composites, clouds_masked[[8]], inverse = TRUE)

plot(composites_masked$X2022_08_05_1)


# Export
setwd("/home/alessio/Synthesis/NDVI")

writeRaster(x = kndvi[[43]],
            filename = "ndvi_2024_05_14.tif",
            format = "GTiff",
            datatype = 'FLT4S',
            overwrite = T)


#### KNDVI ####

# Calculate the KNDVI (Kernel Normalized Difference Vegetation Index)

kndvi <- map_at(composites, c(1:16), spectralIndices,
                         blue = 1,
                         green = 2,
                         red = 3,
                         redEdge1 = 4,
                         nir = 5,
                         indices = "KNDVI")

kndvi <- map_at(kndvi, c(17:57), spectralIndices,
         blue = 1,
         green = 2,
         red = 3,
         nir = 4,
         indices = "KNDVI")

kndvi <- map(kndvi, raster) # Convert to RasterLayer


# Export
setwd("/home/alessio/Synthesis/KNDVI")

writeRaster(x = kndvi[[43]],
            filename = "kndvi_2024_05_14.tif",
            format = "GTiff",
            datatype = 'FLT4S',
            overwrite = T)

# walk(names(ndvi), function(name) {
#   terra::writeRaster(classificazione_NNE_list[[name]],
#                      filename = paste0(name, "NNE.tif"),
#                      overwrite=TRUE)
# })
